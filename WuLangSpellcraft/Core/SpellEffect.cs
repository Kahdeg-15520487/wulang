using System;

namespace WuLangSpellcraft.Core
{
    /// <summary>
    /// Types of spell effects that can be generated
    /// </summary>
    public enum SpellEffectType
    {
        None,
        Flow,        // Water-based: streams, currents, fluid manipulation
        Projectile,  // Fire-based: fireballs, energy bolts, explosive projectiles
        Barrier,     // Earth-based: shields, walls, protective barriers
        Enhancement, // Metal-based: weapon enhancement, precision effects
        Growth,      // Wood-based: healing, expansion, organic manipulation
        Hybrid       // Multiple elements combined
    }

    /// <summary>
    /// Represents the effect generated by a spell (magic circle)
    /// </summary>
    public class SpellEffect
    {
        public SpellEffectType Type { get; set; }
        public ElementType Element { get; set; }
        public double Power { get; set; }
        public double Stability { get; set; }
        public double Range { get; set; }
        public double Duration { get; set; }
        public bool IsActive { get; set; } = true;
        
        // World interaction properties
        public SpellTarget Target { get; set; } = SpellTarget.None;
        public double KineticForce { get; set; } // For projectiles and movement
        public double HealingPower { get; set; } // For growth/restoration effects
        public double BarrierStrength { get; set; } // For defensive effects
        public double EnhancementMultiplier { get; set; } = 1.0; // For weapon/object enhancement

        /// <summary>
        /// Calculates the mana/energy cost of this spell effect
        /// </summary>
        public double CalculateManaCost()
        {
            var baseCost = Power * 2.0;
            var rangeCost = Range * 0.5;
            var durationCost = Duration * 0.3;
            var stabilityBonus = Stability * 0.2; // More stable spells cost less

            return Math.Max(1.0, baseCost + rangeCost + durationCost - stabilityBonus);
        }

        /// <summary>
        /// Determines if this spell effect can interact with a target
        /// </summary>
        public bool CanAffect(SpellTarget target)
        {
            return Type switch
            {
                SpellEffectType.Flow => target == SpellTarget.Environment || target == SpellTarget.Object,
                SpellEffectType.Projectile => target == SpellTarget.Enemy || target == SpellTarget.Object,
                SpellEffectType.Barrier => target == SpellTarget.Self || target == SpellTarget.Ally,
                SpellEffectType.Enhancement => target == SpellTarget.Weapon || target == SpellTarget.Self,
                SpellEffectType.Growth => target == SpellTarget.Self || target == SpellTarget.Ally || target == SpellTarget.Environment,
                SpellEffectType.Hybrid => true, // Hybrid effects are versatile
                _ => false
            };
        }

        /// <summary>
        /// Generates a description of the spell effect for the world engine
        /// </summary>
        public string GetWorldDescription()
        {
            return Type switch
            {
                SpellEffectType.Flow => $"Creates {Element} flow with force {KineticForce:F1} over range {Range:F1}",
                SpellEffectType.Projectile => $"Launches {Element} projectile with power {Power:F1} and force {KineticForce:F1}",
                SpellEffectType.Barrier => $"Forms {Element} barrier with strength {BarrierStrength:F1} for {Duration:F1} seconds",
                SpellEffectType.Enhancement => $"Enhances target with {Element} power, multiplier {EnhancementMultiplier:F1}x",
                SpellEffectType.Growth => $"Applies {Element} growth/healing with power {HealingPower:F1}",
                SpellEffectType.Hybrid => $"Complex {Element}-based effect with power {Power:F1}",
                _ => "No effect"
            };
        }

        public override string ToString()
        {
            return $"{Type} ({Element}): Power {Power:F1}, Range {Range:F1}, Duration {Duration:F1}s";
        }
    }

    /// <summary>
    /// Types of targets for spell effects
    /// </summary>
    public enum SpellTarget
    {
        None,
        Self,
        Ally,
        Enemy,
        Weapon,
        Object,
        Environment
    }

    /// <summary>
    /// Represents the result of casting a spell in the world
    /// </summary>
    public class SpellCastResult
    {
        public bool IsSuccess { get; set; }
        public SpellEffect Effect { get; set; } = new SpellEffect();
        public double ManaCost { get; set; }
        public string ErrorMessage { get; set; } = string.Empty;
        public WorldInteraction[] WorldChanges { get; set; } = Array.Empty<WorldInteraction>();

        public static SpellCastResult Failure(string reason)
        {
            return new SpellCastResult
            {
                IsSuccess = false,
                ErrorMessage = reason
            };
        }

        public static SpellCastResult CreateSuccess(SpellEffect effect, double manaCost, params WorldInteraction[] changes)
        {
            return new SpellCastResult
            {
                IsSuccess = true,
                Effect = effect,
                ManaCost = manaCost,
                WorldChanges = changes
            };
        }
    }

    /// <summary>
    /// Represents an interaction with the world engine
    /// </summary>
    public class WorldInteraction
    {
        public string Type { get; set; } = string.Empty; // "physics", "visual", "audio", etc.
        public string Description { get; set; } = string.Empty;
        public double Intensity { get; set; }
        public double Duration { get; set; }
        public object? Parameters { get; set; } // Additional parameters for the world engine
    }
}
